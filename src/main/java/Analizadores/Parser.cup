/* 1. Package e importaciones */
package Analizadores; 
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
/* 2. Codigo para el parser, variables, metodos */
parser code 
{:
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


    //Clases, objetos, variables, lista, etc... en sintaxis java
    
    //Creo una lista de tipo String llamada 'resultados', donde guardare cada uno de los resultados analizados
    public List<String> resultados = new ArrayList<String>();
    public HashMap<String, String> conjuntos = new HashMap<String, String>();
    public HashMap<String, String> expresiones = new HashMap<String, String>();


:} 

/* 3. Terminales */
terminal String PTCOMA,DOSPTO,VIRG,PARIZQ,PARDER,CORIZQ,CORDER,BRADER,BRAIZQ,COM,IDENT;
terminal String ASIGN,PERCEN;
terminal String LETR,DIGITO;
terminal String ASCII;
terminal String CONCAT,DIS,KLE,MAS,INTER;
terminal String CONJUNTO,CADENA;
terminal String SPECHAR,COMA;


/* 4. No Terminales */
non terminal ini;
non terminal instrucciones;
non terminal instruccion;
non terminal String conjus;
non terminal DECLACONJUN,DECLAREGEX,PRUEBAREGEX;
non terminal declaracion;
non terminal String regex;
non terminal String DEFVIR,DEFCOM;
non terminal String ELEMENT;
/* 5. Precedencias */
//precedence left MAS,MENOS;
//precedence left POR,DIVIDIDO;


/* 6. Producciones */

start with ini; 
ini ::= BRAIZQ instrucciones;

instrucciones ::= instrucciones instruccion 
                  | instrucciones error
                  | instruccion
; 

instruccion ::= 
             DECLACONJUN
            |DECLAREGEX 
            |PERCEN PRUEBAREGEX BRADER
;


DECLACONJUN ::= CONJUNTO DOSPTO IDENT:a ASIGN conjus:b PTCOMA
{:
conjuntos.put(a,b);
:} 
;


conjus ::= DEFVIR:a {:RESULT=a;:}
        | DEFCOM:a {:RESULT="["+a+"]";:}

;

DEFVIR ::= LETR:a VIRG LETR:b {:RESULT="["+a+"-"+b+"]";:}
            | DIGITO:a VIRG DIGITO:b {:RESULT="["+a+"-"+b+"]";:}
            | ASCII:a VIRG ASCII:b {:RESULT="["+a+"-"+b+"]";:}
;

DEFCOM ::= 
    DEFCOM:a COMA ELEMENT:b {:RESULT = (a != null ? a : "") + b;:}  
    | ELEMENT:b {:RESULT = "" + b;:}
;

ELEMENT ::= LETR:a{:RESULT=a;:}
         | DIGITO:a{:RESULT=a;:}
         | ASCII:a{:RESULT=a;:}
         | SPECHAR:a{:RESULT=a;:}
;

DECLAREGEX ::=
    IDENT:a ASIGN regex:b PTCOMA {:if (b.contains("null")){
                                    System.out.println("La Expresion regular con nombre "+a+" tiene conjuntos no definidos");
                                   }else{
                                        //se agrega a nuestras expresiones valida
                                        expresiones.put(a,b);
                                        System.out.println("Identificador "+a+" Expresion: "+b);

                                   }:}
;

regex ::= CONCAT:c regex:a regex:b {:RESULT=c+a+b;:}
        | DIS:c regex:a regex:b {:RESULT=c+a+b;:}
        | KLE:c regex:a {:RESULT=c+a;:}
        | MAS:c regex:a {:RESULT=c+a;:}
        | INTER:c regex:a {:RESULT=c+a;:}
        | BRAIZQ:a IDENT:c BRADER:b {:for (Map.Entry<String, String> entrada : conjuntos.entrySet()) {
            // Obtener la llave y el valor asociado a la entrada actual
            String llave = entrada.getKey();
            String valor = entrada.getValue();
            if (c.equals(llave)){
                //si existe el conjunto
                RESULT=a+c+b;
            }
            }
            
            :}
        | CADENA:a {:RESULT=a;:}
;

PRUEBAREGEX ::= PRUEBAREGEX declaracion PTCOMA
            |declaracion PTCOMA   
;

declaracion ::=IDENT DOSPTO CADENA{::};


















