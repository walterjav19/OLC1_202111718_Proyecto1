/* 1. Package e importaciones */
package Analizadores; 
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import Estructuras.NodeArbol;
import Estructuras.Expresiones;
import Estructuras.Arbol;
import java.util.LinkedList;



/* 2. Codigo para el parser, variables, metodos */
parser code 
{:
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){
        resultados.add("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value);
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        resultados.add("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido");
    }  


    //Clases, objetos, variables, lista, etc... en sintaxis java
    public int conthojas=1;

    //Creo una lista de tipo String llamada 'resultados', donde guardare cada uno de los resultados analizados
    public List<String> resultados = new ArrayList<String>();
    public List<Expresiones> r_json = new ArrayList<Expresiones>();
    public HashMap<String, String> conjuntos = new HashMap<String, String>();
    public HashMap<String, Arbol> expresiones = new HashMap<String, Arbol>();


:} 

/* 3. Terminales */
terminal String PTCOMA,DOSPTO,VIRG,BRADER,BRAIZQ,IDENT;
terminal String ASIGN,PERCEN;
terminal String LETR,DIGITO;
terminal String ASCII;
terminal String CONCAT,DIS,KLE,MAS,INTER;
terminal String CONJUNTO,CADENA;
terminal String SPECHAR,COMA;


/* 4. No Terminales */
non terminal ini;
non terminal instrucciones;
non terminal instruccion;
non terminal String conjus;
non terminal DECLACONJUN,DECLAREGEX,PRUEBAREGEX;
non terminal declaracion;
non terminal NodeArbol regex;
non terminal String DEFVIR,DEFCOM;
non terminal String ELEMENT;
/* 5. Precedencias */
//precedence left MAS,MENOS;
//precedence left POR,DIVIDIDO;


/* 6. Producciones */

start with ini; 
ini ::= BRAIZQ instrucciones;

instrucciones ::= instrucciones instruccion 
                  | instrucciones error
                  | instruccion
; 

instruccion ::= 
             DECLACONJUN
            |DECLAREGEX 
            |PERCEN PRUEBAREGEX BRADER
;


DECLACONJUN ::= CONJUNTO DOSPTO IDENT:a ASIGN conjus:b PTCOMA
{:
conjuntos.put(a,b);
:} 
;


conjus ::= DEFVIR:a {:RESULT=a;:}
        | DEFCOM:a {:RESULT="["+a+"]";:}

;

DEFVIR ::= LETR:a VIRG LETR:b {:RESULT="["+a+"-"+b+"]";:}
            | DIGITO:a VIRG DIGITO:b {:RESULT="["+a+"-"+b+"]";:}
            | ASCII:a VIRG ASCII:b {:RESULT="["+a+"-"+b+"]";:}
;

DEFCOM ::= 
    DEFCOM:a COMA ELEMENT:b {:RESULT = (a != null ? a : "") + b;:}  
    | ELEMENT:b {:RESULT = "" + b;:}
;

ELEMENT ::= LETR:a{:RESULT=a;:}
         | DIGITO:a{:RESULT=a;:}
         | ASCII:a{:RESULT=a;:}
;

DECLAREGEX ::=
    IDENT:a ASIGN regex:b PTCOMA {:
                                   if (b==null){
                                    resultados.add("La Expresion regular con nombre "+a+" tiene conjuntos no definidos");
                                    System.out.println("La Expresion regular con nombre "+a+" tiene conjuntos no definidos");
                                   }else{
                                        
                                        //se agrega a nuestras expresiones valida
                                        NodeArbol asterisco=new NodeArbol("#","",b.Expresion,parser.conthojas,null,null);
                                        NodeArbol conca=new NodeArbol(".","",b.Expresion,-1,b,asterisco);
                                        conca.SetNexpresion(a);
                                        System.out.println("La Expresion regular con nombre "+a+" equivale a "+b.Expresion);
                                        Arbol a_ex=new Arbol(conca);
                                        //metodo del arbol del paso 2 en adelante
                                        a_ex.asignarAnulable(a_ex.raiz);
                                        a_ex.calcularPrimerosYUltimos(a_ex.raiz);
                                        a_ex.calcularSiguientes(a_ex.raiz);
                                        a_ex.GenerarTablaSiguientes();
                                        a_ex.imprimirsiguientes();
                                        expresiones.put(a,a_ex);
                                        //reiniciamos el conteo de hojas
                                        parser.conthojas=1;

                                   }:}
;

regex ::= CONCAT:c regex:a regex:b {:if (a!=null && b!=null){
                                    NodeArbol n_a=new NodeArbol(c,"", a.Expresion+b.Expresion, -1, a, b);
                                    
                                    RESULT=n_a;}:}
        | DIS:c regex:a regex:b {:if (a!=null && b!=null){
                                  NodeArbol n_a=new NodeArbol(c,"", "("+a.Expresion+c+b.Expresion+")", -1, a, b);
                                  
                                  RESULT=n_a;}:}
        | KLE:c regex:a {:if (a!=null){
                          NodeArbol n_a=new NodeArbol(c,"", a.Expresion+c, -1, a, null);
                         
                          RESULT=n_a;}:}
        | MAS:c regex:a {:if (a!=null){
                          NodeArbol n_a=new NodeArbol(c,"", a.Expresion+c, -1, a, null);
                          RESULT=n_a;}:}
        | INTER:c regex:a {:if (a!=null){
                            NodeArbol n_a=new NodeArbol(c,"", a.Expresion+c, -1, a, null);
                            
                            RESULT=n_a;}:}
        | BRAIZQ:a IDENT:c BRADER:b {:for (Map.Entry<String, String> entrada : conjuntos.entrySet()) {
            // Obtener la llave y el valor asociado a la entrada actual
            String llave = entrada.getKey();
            String valor = entrada.getValue();
            if (c.equals(llave)){
                //si existe el conjunto
                NodeArbol n_a=new NodeArbol(c.toString(),"",valor, parser.conthojas, null, null);
                
                RESULT=n_a;
                parser.conthojas++; 
            }
            }
            
            :}
        | CADENA:a {:NodeArbol n_a=new NodeArbol(a,"",a.replaceAll("\"", ""), parser.conthojas, null, null);
                    
                    RESULT=n_a;
                            parser.conthojas++;:}
        | SPECHAR:a{:if(a.equals("\\\"")){
                        NodeArbol n_a=new NodeArbol("\\\\\\\"","",a, parser.conthojas, null, null);
                        
                        RESULT=n_a;
                    }else if (a.equals("\\\'")){
                        NodeArbol n_a=new NodeArbol("\\\\'","",a, parser.conthojas, null, null);
                        
                        RESULT=n_a;
                    }else if (a.equals("\\n")){
                        NodeArbol n_a=new NodeArbol("\\\\n","",a, parser.conthojas, null, null);
                        
                        RESULT=n_a;
                    }
                            parser.conthojas++;:}
;

PRUEBAREGEX ::= PRUEBAREGEX declaracion PTCOMA
            |declaracion PTCOMA   
;

declaracion ::=IDENT:b DOSPTO CADENA:a {:
                Arbol valor = expresiones.get(b);
                if (valor != null) {
                    
                    int firstIndex = a.indexOf("\"") + 1; // encuentra la posición del primer carácter de comillas dobles
                    int lastIndex = a.lastIndexOf("\""); // encuentra la posición del último carácter de comillas dobles
                    String result = a.substring(firstIndex, lastIndex); // extrae solo la porción de la cadena dentro de las comillas
                    result=result.replace("\\n", "\n");
                    Boolean console=valor.ValidarCadena(result.replace("\\", ""));
                    

                    if (console){
                        resultados.add("La expresion: "+a+" Es Valida con la expresion regular "+b);
                        Expresiones ex=new Expresiones(a,b,"\"Cadena Valida\"");
                        r_json.add(ex);
                        ex.GenerarJson(r_json);
                    }else{
                        resultados.add("La expresion: "+a+" No es Valida con la expresion regular "+b);
                        Expresiones ex=new Expresiones(a,b,"\"Cadena Invalida\"");
                        r_json.add(ex);
                        ex.GenerarJson(r_json);
                    }
                    
                } else {
                    // la clave no existe en el mapa
                    resultados.add("La Expresion regular con nombre "+b+" No esta Definida");
                }
               
            :};





















